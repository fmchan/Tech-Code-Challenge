/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.fmchan;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;

class CommandErrorTest {
    private static Controller controller = new Controller();

    private final PrintStream standardOut = System.out;
    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();

    @BeforeEach
    public void setUp() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }
    @AfterEach
    public void tearDown() {
        System.setOut(standardOut);
    }

    @Test
	public void invalidCommand() throws Exception {
        controller.assign("V");
        assertEquals(Constants.ERR_INVALID_CMD, outputStreamCaptor.toString().trim());
    }
    @Test
	public void createCmdErr() throws Exception {
        controller.assign("C 2 2 3");
        assertEquals(Constants.ERR_CMD_CREATE, outputStreamCaptor.toString().trim());
    }
    @Test
	public void lineCmdErr() throws Exception {
        controller.assign("L 2 2");
        assertEquals(Constants.ERR_CMD_LINE, outputStreamCaptor.toString().trim());
    }
    @Test
	public void rectCmdErr() throws Exception {
        controller.assign("R 2 2");
        assertEquals(Constants.ERR_CMD_RECTANGLE, outputStreamCaptor.toString().trim());
    }
    @Test
	public void bucketFillCmdErr() throws Exception {
        controller.assign("B 2 2 oo");
        assertEquals(Constants.ERR_CMD_BUCKET_FILL, outputStreamCaptor.toString().trim());
    }
    @Test
	public void invalidLine() throws Exception {
        controller.assign("C 20 5");
        controller.assign("L 2 3 3 4");
        assertEquals(Constants.ERR_NOT_LINE, outputStreamCaptor.toString().trim());
    }
    @Test
	public void invalidOrder() throws Exception {
        controller.assign("C 20 5");
        controller.assign("L 10 3 5 3");
        assertEquals(Constants.ERR_INVALID_ORDER, outputStreamCaptor.toString().trim());
    }
    @Test
	public void outOfBound() throws Exception {
        controller.assign("C 20 5");
        controller.assign("L 21 5 21 7");
        assertEquals(Constants.ERR_NOT_BOUND, outputStreamCaptor.toString().trim());
    }
}
